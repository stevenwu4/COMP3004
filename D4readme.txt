TAEval v1.0What is it?-------------The TAEval system is the implementation for the proposed client-server application to be used by TAs, Instructors, and Administrators of Carleton University that will allow Instructors to assign, edit, or delete tasks for TAs of the Course they are instructing and to provide evaluation feedback to the TAs about how they performed on their respective tasks.Version 1.0 only supports features outlined for the TA and Instructor user. That is, Administrator user features and functionality such as managing Courses, TAs, and Instructors and running evaluation reports on TAs are not supported yet for this release.The Latest Version------------------------This is the first release of the full realization of the TAEval system, v1.0.Documentation--------------------Commonly used classes include the model classes Course, Task, Instructor and TeachingAssistant, as well as our NetworkConnection proxy to QTcpSocket.Data transfer occurs from Client to Server by both respectively listening for eachother’s signal processPacket(), which attaches a packetId along with the packetData in the call to give enough information for the observing side.Client Side:When Main runs, an instance of TAEval, our façade for the commonly used classes used to talk to the server, is created. The login window is displayed and ensures that TAEval will be deleted after the application shuts down.The sequence of UI windows upon login is the same regardless of the userType of the user logging in. Upon logging in, the user is prompted with all of his unique year + season pairs for his/her relevant courses. After selecting such a pair, eg: “2007 Winter”, the user is presented a list of all of the courses which took place in that timeframe. An Instructor clicking a Course will be able to manage tasks for that Course, and a TA clicking a Course will be able to view his tasks and associated evaluations, if they exist.The TAEval façade provides a high level interface for all client requests to the server.Server Side:When Main runs, an instance of the Server is created. Ensures that the app will shutdown properly if server’s signals are finished and that the server will be deleted after the application is about to quit. The Server handles incoming connections by threading client connections.A ClientConnection is responsible for initializing and communicating with the database. It handles all requests from the Client based on packetId and calls the corresponding API call. DBManager is a proxy to the SQLite database from QT. It handles all of the initializations, tables, queries and requests sent to the Server.Installation---------------The program must be run on the platform provided by the official COMP3004 32-bit VM. The VM will provide the necessary release of QT Creator required to build and run the program.  Ensure that in each folder, TAEvalClient and TAEvalServer, that there is a respective .pro file that manages the make configurations.To set up the program, first open up QT Creator. At the introductory Welcome tab, click Open New Project. Pick either of the two folders, then under the Projects tab, right-click and click Load Project to load the remaining folder.Build & Usage-------Ensure that in Tools -> Options, under Environment in the General tab, that Terminal path is set to:/usr/bin/xterm -eOnce the two projects are loaded properly, right click both folders and select Build. Once both are done building, it is imperative to run TAEvalServer before TAEvalClient, or else the client program will hang.After building TAEvalClient, you must create a configuration file called ‘taeval.config’ that will consist of two lines; the first line will be the IP address of the host, and the second line will be the port ranging inclusively between the values 60000-60010:<IP address eg: 134.117.28.97> <Port eg: 60000>The port is currently hardcoded in the server to be 60001, and thus your corresponding port entered in the second line of your client configuration file must also match to 60001. To use a different port on the server, go to Server.cpp and edit the parameter of _port in the constructor, and ensure your client configuration port matches that value.Authors----------In alphabetical order:Sean BenjaminDylan KristolaitisJustin KungSteven WuContact----------Respective e-mail addresses for the authors are:seanbenjamin@cmail.carleton.cadylankristolaitis@cmail.carleton.cajustinkung@cmail.carleton.castevenwu@cmail.carleton.caFor any issues, feature requests, inquiries, or general contact.